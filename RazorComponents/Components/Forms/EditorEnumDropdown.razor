@namespace Majunga.Libraries.RazorComponents.Components.Forms
@typeparam TItem where TItem : Enum

@using System.Linq.Expressions
<div class="form-group">
    <InputSelect class="form-select" Value="@Value" ValueChanged="@ValueChanged" ValueExpression="@ValueExpression" @attributes="@AdditionalAttributes" >
        @{
            var i = 0;
        }

        @foreach (var item in Items!)
        {
            @if(i == 0 && string.IsNullOrWhiteSpace(DefaultValue) == false)
            {
                <option value="@item.Key">@DefaultValue</option>
            }
            else
            {
               <option value="@item.Key">@item.Value</option>
            }

            i++;
        }
    </InputSelect>
</div>

@code {
    private Dictionary<TItem, string>? Items { get; set; }
    [Parameter] public RenderFragment<TItem>? OptionsTemplate { get; set; }

    [Parameter] public string DefaultValue { get; set; } = "Please Select";

    [Parameter] public TItem                   Value           { get; set; }
    [Parameter] public EventCallback<TItem>    ValueChanged    { get; set; }
    [Parameter] public Expression<Func<TItem>> ValueExpression { get; set; }

    protected override Task OnInitializedAsync()
    {
        Items = Enum.GetValues(typeof(TItem))
               .Cast<TItem>()
               .ToDictionary(t => t, t => t.ToString() );
        return base.OnInitializedAsync();
    }

    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object> AdditionalAttributes { get; set; }
}
