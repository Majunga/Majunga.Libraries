@using System.Linq
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using System.Net.Http.Json


@inject ILogger<FileUploader> logger
@inject HttpClient Client 

<InputFile class="@Class" OnChange="@OnInputFileChange" />


@code {
    [Parameter]
    public int MaxAllowedFiles { get; set; } = 1;

    [Parameter]
    public string? Class { get; set; }

    private IBrowserFile? _selectedFile = null;
    const long MaxFileSize = 1024 * 1024 * 15;

    private bool _upload { get; set; } = false;



    protected override Task OnInitializedAsync()
    {
        Class = string.IsNullOrWhiteSpace(this.Class) ? "form-control" : $"form-control {this.Class}";
        return base.OnInitializedAsync();
    }

    private Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            // Get the selected file   
            var file = e.File;

            // Check if the file is null then return from the method   
            if (file == null)
                return Task.CompletedTask;

            // Validate the extension if requried (Client-Side)  

            // Set the value of the stream by calling OpenReadStream and pass the maximum number of bytes allowed because by default it only allows 512KB  
            _selectedFile = file;

            _upload = true;
        }
        catch(Exception ex)
        {
            logger.LogError(ex, "Failed OnInputFileChange");
        }

        return Task.CompletedTask;
    }

    public async Task<T?> SubmitFileAsync<T>()
        where T : class, new()
    {
        try
        {
            if (!_upload) return null;

            using var content = new MultipartFormDataContent();
            using var fileStream = _selectedFile!.OpenReadStream(MaxFileSize);

            var streamContent = new StreamContent(fileStream);
            streamContent.Headers.ContentType = new MediaTypeHeaderValue(_selectedFile.ContentType);
            content.Add(streamContent, "\"File\"", _selectedFile.Name);

            // Submit the request 
            var response = await Client.PostAsync("api/filecontent", content);

            if(!response.IsSuccessStatusCode) return null;

            _upload = false;
            return await response.Content.ReadFromJsonAsync<T>();
        }
        catch(Exception ex)
        {
            logger.LogError(ex, "Failed SubmitFileAsync");
            throw new ApplicationException(ex.Message);
        }
    }
}